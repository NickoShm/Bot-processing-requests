from aiogram.enums import ContentType
from handlers.main import router_client, command_start
from aiogram.types import Message
from aiogram import F, Bot
from keyboards import keyboard_client, keyboard_admin
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import ID_ADMIN
from data_base import base_requests, base_employees
from sqlalchemy.ext.asyncio import AsyncSession


class FsmCreateRequest(StatesGroup):
    """
    –ø–æ—á—Ç–∞ - email
    –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è - name_parent
    –§–ò–û —É—á–µ–Ω–∏–∫–∞ - name_student
    –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - phone
    –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é - description
    —Ñ–∞–π–ª - file
    –ø—Ä–æ–≤–µ—Ä–∫–∞ - examination

    """
    email = State()
    name_parent = State()
    name_student = State()
    phone = State()
    file = State()
    description = State()
    examination = State()


@router_client.message(F.text == 'üì©–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–∫–∏')
async def start_create_request(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    :param state: FSMContext
    :param message: Message
    :return:
    """
    await state.set_state(FsmCreateRequest.email)
    await message.answer(
        '<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:</b>'
        '\n‚≠ï –ü–æ—á—Ç–∞'
        '\n‚≠ï –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è'
        '\n‚≠ï –§–ò–û —É—á–µ–Ω–∏–∫–∞'
        '\n‚≠ï –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        '\n‚≠ï –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏'
        '\n‚≠ï –§–∞–π–ª (—Å–∫—Ä–∏–Ω, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ)'
        '\n\n–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à—É –ø–æ—á—Ç—É',
        reply_markup=keyboard_client.cansel()
    )


@router_client.message(FsmCreateRequest.email)
async def load_email(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –§–ò–û
    :param message: Message
    :param state: FSMContext
    :return:
    """
    if message.content_type != ContentType.TEXT:
        await message.answer(
            '–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç'
        )
        return
    if message.text == '‚ùå–û–¢–ú–ï–ù–ê':
        await command_start(message, state)
        return

    context_state = await state.get_state()
    if context_state == 'FsmCreateRequest:email':
        await state.update_data(email=message.text)
    context_data = await state.get_data()
    await state.set_state(FsmCreateRequest.name_parent)
    await message.answer(
        '<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:</b>'
        f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
        '\n‚≠ï –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è'
        '\n‚≠ï –§–ò–û —É—á–µ–Ω–∏–∫–∞'
        '\n‚≠ï –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        '\n‚≠ï –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏'
        '\n‚≠ï –§–∞–π–ª (—Å–∫—Ä–∏–Ω, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ)'
        '\n\n–ù–∞–ø–∏—à–∏—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è',
        reply_markup=keyboard_client.back_and_cansel()
    )


@router_client.message(FsmCreateRequest.name_parent)
async def load_name_parent(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è
    –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    :param message: Message
    :param state: FSMContext
    :return:
    """
    if message.content_type != ContentType.TEXT:
        await message.answer(
            '–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç'
        )
        return
    if message.text == '‚ùå–û–¢–ú–ï–ù–ê':
        await command_start(message, state)
        return

    context_state = await state.get_state()
    if message.text == 'üîô–ù–ê–ó–ê–î' and context_state == 'FsmCreateRequest:name_parent':
        await start_create_request(message, state)
        return

    if context_state == 'FsmCreateRequest:name_parent':
        await state.update_data(name_parent=message.text)

    await state.set_state(FsmCreateRequest.name_student)

    context_date = await state.get_data()

    await message.answer(
        '<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:</b>'
        f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_date.get("email")}</i>'
        f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_date.get("name_parent")}</i>'
        '\n‚≠ï –§–ò–û —É—á–µ–Ω–∏–∫–∞'
        '\n‚≠ï –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        '\n‚≠ï –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏'
        '\n‚≠ï –§–∞–π–ª (—Å–∫—Ä–∏–Ω, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ)'
        '\n\n–ù–∞–ø–∏—à–∏—Ç–µ –§–ò–û —É—á–µ–Ω–∏–∫–∞',
        reply_markup=keyboard_client.back_and_cansel()
    )


@router_client.message(FsmCreateRequest.name_student)
async def load_name_student(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    :param message: Message
    :param state: FSMContext
    :return:
    """
    if message.content_type != ContentType.TEXT:
        await message.answer(
            '–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç'
        )
        return
    if message.text == '‚ùå–û–¢–ú–ï–ù–ê':
        await command_start(message, state)
        return

    context_state = await state.get_state()
    if message.text == 'üîô–ù–ê–ó–ê–î' and context_state == 'FsmCreateRequest:name_student':
        await load_email(message, state)
        return

    if context_state == 'FsmCreateRequest:name_student':
        await state.update_data(name_student=message.text)

    await state.set_state(FsmCreateRequest.phone)

    context_date = await state.get_data()

    await message.answer(
        '<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:</b>'
        f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_date.get("email")}</i>'
        f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_date.get("name_parent")}</i>'
        f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_date.get("name_student")}</i>'
        '\n‚≠ï –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        '\n‚≠ï –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏'
        '\n‚≠ï –§–∞–π–ª (—Å–∫—Ä–∏–Ω, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ)'
        '\n\n–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ '
        '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É',
        reply_markup=keyboard_client.phone_back_and_cansel()
    )


@router_client.message(FsmCreateRequest.phone)
async def load_phone(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞
    :param message: Message
    :param state: FSMContext
    :return:
    """
    if message.content_type != ContentType.TEXT and message.content_type != ContentType.CONTACT:
        await message.answer(
            '–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É'
        )
        return
    if message.text == '‚ùå–û–¢–ú–ï–ù–ê':
        await command_start(message, state)
        return

    context_state = await state.get_state()
    if message.text == 'üîô–ù–ê–ó–ê–î' and context_state == 'FsmCreateRequest:phone':
        await load_name_parent(message, state)
        return

    if context_state == 'FsmCreateRequest:phone':
        try:
            await state.update_data(phone=message.contact.phone_number)
        except AttributeError:
            await state.update_data(phone=message.text)

    await state.set_state(FsmCreateRequest.description)
    context_date = await state.get_data()
    await message.answer(
        '<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:</b>'
        f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_date.get("email")}</i>'
        f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_date.get("name_parent")}</i>'
        f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_date.get("name_student")}</i>'
        f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_date.get("phone")}</i>'
        '\n‚≠ï –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏'
        '\n‚≠ï –§–∞–π–ª (—Å–∫—Ä–∏–Ω, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ)'
        '\n\n–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é',
        reply_markup=keyboard_client.back_and_cansel()
    )


@router_client.message(FsmCreateRequest.description)
async def load_description(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–∏—Ç—É–∞—Ü–∏–∏
    –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    :param message: Message
    :param state: FSMContext
    :return:
    """
    if message.content_type != ContentType.TEXT:
        await message.answer(
            '–í—ã –¥–æ–ª–∂–Ω—ã –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç'
        )
        return

    if message.text == '‚ùå–û–¢–ú–ï–ù–ê':
        await command_start(message, state)
        return

    context_state = await state.get_state()
    if message.text == 'üîô–ù–ê–ó–ê–î' and context_state == 'FsmCreateRequest:description':
        await load_name_student(message, state)
        return

    if context_state == 'FsmCreateRequest:description':
        await state.update_data(
            description=message.text,
            user_id=message.from_user.id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            username=message.from_user.username,
        )

    await state.set_state(FsmCreateRequest.file)
    context_date = await state.get_data()
    await message.answer(
        '<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:</b>'
        f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_date.get("email")}</i>'
        f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_date.get("name_parent")}</i>'
        f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_date.get("name_student")}</i>'
        f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_date.get("phone")}</i>'
        f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_date.get("description")}</i>'
        '\n‚≠ï –§–∞–π–ª (—Å–∫—Ä–∏–Ω, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ)'
        '\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç '
        '–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É',
        reply_markup=keyboard_client.back_and_cansel_next()
    )


@router_client.message(FsmCreateRequest.file)
async def load_file(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    :param message: Message
    :param state: FSMContext
    :return:
    """
    if message.text == '‚ùå–û–¢–ú–ï–ù–ê':
        await command_start(message, state)
        return

    context_state = await state.get_state()
    if message.text == 'üîô–ù–ê–ó–ê–î' and context_state == 'FsmCreateRequest:file':
        await load_phone(message, state)
        return

    if message.text == '–ü–†–û–ü–£–°–¢–ò–¢–¨‚è≠':
        await state.set_state(FsmCreateRequest.examination)
        context_data = await state.get_data()
        await message.answer(
            '<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:</b>'
            f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
            f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_data.get("name_parent")}</i>'
            f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_data.get("name_student")}</i>'
            f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_data.get("phone")}</i>'
            f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_data.get("description")}</i>'
            '\n‚ùå –§–∞–π–ª: <i>–Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª—Å—è</i>'
            '\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?',
            reply_markup=keyboard_client.back_and_cansel_and_continue()
        )
        return

    if context_state == 'FsmCreateRequest:file':
        if message.content_type == ContentType.TEXT:
            await message.answer(
                '–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–∫—É–º–µ–Ω—Ç '
                '–∏–ª–∏ –Ω–∞–∂–∞—Ç—å "–ü–†–û–ü–£–°–¢–ò–¢–¨"'
            )
            return
        type_file = message.content_type
        if type_file == ContentType.PHOTO:
            file = message.photo[-1].file_id
        elif type_file == ContentType.VIDEO:
            file = message.video.file_id
        elif type_file == ContentType.VOICE:
            file = message.voice.file_id
        else:
            file = message.document.file_id
        list_files = [
            {
                'file': file,
                'type_file': type_file
            }
        ]
        await state.update_data(
            file=list_files
        )

    await state.set_state(FsmCreateRequest.examination)
    context_data = await state.get_data()
    list_files = context_data.get('file')
    if list_files is None:
        await message.answer(
            '<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:</b>'
            f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
            f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_data.get("name_parent")}</i>'
            f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_data.get("name_student")}</i>'
            f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_data.get("phone")}</i>'
            f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_data.get("description")}</i>'
            '\n‚ùå –§–∞–π–ª: <i>–Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª—Å—è</i>'
            '\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?',
            reply_markup=keyboard_client.back_and_cansel_and_continue()
        )
        return
    if list_files[0]['type_file'] == ContentType.PHOTO:
        await message.answer_photo(
            photo=list_files[0]['file'],
            caption='<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:</b>'
                    f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
                    f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_data.get("name_parent")}</i>'
                    f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_data.get("name_student")}</i>'
                    f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_data.get("phone")}</i>'
                    f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_data.get("description")}</i>'
                    '\n‚úÖ –§–∞–π–ª: <i>–∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ</i>'
                    '\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?',
            reply_markup=keyboard_client.back_and_cansel_and_continue()
        )
        return

    if list_files[0]['type_file'] == ContentType.VIDEO:
        await message.answer_video(
            video=list_files[0]['file'],
            caption='<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:</b>'
                    f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
                    f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_data.get("name_parent")}</i>'
                    f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_data.get("name_student")}</i>'
                    f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_data.get("phone")}</i>'
                    f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_data.get("description")}</i>'
                    '\n‚úÖ –§–∞–π–ª: <i>–∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ</i>'
                    '\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?',
            reply_markup=keyboard_client.back_and_cansel_and_continue()
        )
        return

    if list_files[0]['type_file'] == ContentType.VOICE:
        await message.answer_voice(
            voice=list_files[0]['file'],
            caption='<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:</b>'
                    f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
                    f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_data.get("name_parent")}</i>'
                    f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_data.get("name_student")}</i>'
                    f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_data.get("phone")}</i>'
                    f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_data.get("description")}</i>'
                    '\n‚úÖ –§–∞–π–ª: <i>–∑–∞–≥—Ä—É–∂–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>'
                    '\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?',
            reply_markup=keyboard_client.back_and_cansel_and_continue()
        )
        return

    await message.answer_document(
        document=list_files[0]['file'],
        caption='<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:</b>'
                f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
                f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_data.get("name_parent")}</i>'
                f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_data.get("name_student")}</i>'
                f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_data.get("phone")}</i>'
                f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_data.get("description")}</i>'
                '\n‚úÖ –§–∞–π–ª: <i>–∑–∞–≥—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç</i>'
                '\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?',
        reply_markup=keyboard_client.back_and_cansel_and_continue()
    )


@router_client.message(FsmCreateRequest.examination)
async def load_examination(message: Message, state: FSMContext,
                           bot: Bot, session: AsyncSession):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É –∏ –≤ –ë–î
    :param session: AsyncSession
    :param bot: Bot
    :param message: Message
    :param state: FSMContext
    :return:
    """
    context_data = await state.get_data()
    list_files: list = context_data.get('file')
    if message.content_type != ContentType.TEXT:
        type_file = message.content_type
        if type_file == ContentType.PHOTO:
            file = message.photo[-1].file_id
        elif type_file == ContentType.VIDEO:
            file = message.video.file_id
        elif type_file == ContentType.VOICE:
            file = message.voice.file_id
        else:
            file = message.document.file_id
        list_files.append(
            {
                'file': file,
                'type_file': type_file
            }
        )
        await state.update_data(file=list_files)

        for i in list_files:
            if i['type_file'] == ContentType.PHOTO:
                await message.answer_photo(
                    photo=i['file']
                )
            elif i['type_file'] == ContentType.VIDEO:
                await message.answer_video(
                    video=i['file']
                )
            elif i['type_file'] == ContentType.VOICE:
                await message.answer_voice(
                    voice=i['file']
                )
            else:
                await message.answer_document(
                    document=i['file']
                )

        await message.answer(
            '<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:</b>'
            f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
            f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_data.get("name_parent")}</i>'
            f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_data.get("name_student")}</i>'
            f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_data.get("phone")}</i>'
            f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_data.get("description")}</i>'
            '\n‚úÖ –§–∞–π–ª: <i>–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞</i>'
            '\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?',
            reply_markup=keyboard_client.back_and_cansel_and_continue()
        )
        return

    if message.text == '‚ùå–û–¢–ú–ï–ù–ê':
        await command_start(message, state)
        return

    context_state = await state.get_state()
    if message.text == 'üîô–ù–ê–ó–ê–î' and context_state == 'FsmCreateRequest:examination':
        await load_description(message, state)
        return

    if message.text == 'üì®–û–¢–ü–†–ê–í–ò–¢–¨ –ê–î–ú–ò–ù–£':
        id_request: int = await base_requests.add_new_request(session, context_data)
        employees = await base_employees.get_employees(session)
        await message.answer(
            'üñáÔ∏è–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –í–∞—à —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä - '
            f'<b>{id_request}</b>'
        )
        if list_files is None:
            await bot.send_message(
                ID_ADMIN,
                f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} '
                f'–æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É</b>'
                f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
                f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_data.get("name_parent")}</i>'
                f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_data.get("name_student")}</i>'
                f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_data.get("phone")}</i>'
                f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_data.get("description")}</i>'
                '\n‚ùå –§–∞–π–ª: <i>–Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª—Å—è</i>',
                reply_markup=keyboard_admin.employee_key(employees, id_request)
            )
        elif len(list_files) == 1:
            if list_files[0]['type_file'] == ContentType.PHOTO:
                await bot.send_photo(
                    chat_id=ID_ADMIN,
                    photo=list_files[0]['file'],
                    caption=f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} '
                            f'–æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É</b>'
                            f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
                            f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_data.get("name_parent")}</i>'
                            f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_data.get("name_student")}</i>'
                            f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_data.get("phone")}</i>'
                            f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_data.get("description")}</i>'
                            '\n‚úÖ –§–∞–π–ª: <i>–∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ</i>',
                    reply_markup=keyboard_admin.employee_key(employees, id_request)
                )

            elif list_files[0]['type_file'] == ContentType.VIDEO:
                await bot.send_video(
                    chat_id=ID_ADMIN,
                    video=list_files[0]['file'],
                    caption=f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} '
                            f'–æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É</b>'
                            f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
                            f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_data.get("name_parent")}</i>'
                            f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_data.get("name_student")}</i>'
                            f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_data.get("phone")}</i>'
                            f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_data.get("description")}</i>'
                            '\n‚úÖ –§–∞–π–ª: <i>–∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ</i>',
                    reply_markup=keyboard_admin.employee_key(employees, id_request)
                )

            elif list_files[0]['type_file'] == ContentType.VOICE:
                await bot.send_voice(
                    chat_id=ID_ADMIN,
                    voice=list_files[0]['file'],
                    caption=f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} '
                            f'–æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É</b>'
                            f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
                            f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_data.get("name_parent")}</i>'
                            f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_data.get("name_student")}</i>'
                            f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_data.get("phone")}</i>'
                            f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_data.get("description")}</i>'
                            '\n‚úÖ –§–∞–π–ª: <i>–∑–∞–≥—Ä—É–∂–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>',
                    reply_markup=keyboard_admin.employee_key(employees, id_request)
                )

            else:
                await bot.send_document(
                    chat_id=ID_ADMIN,
                    document=list_files[0]['file'],
                    caption=f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} '
                            f'–æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É</b>'
                            f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
                            f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_data.get("name_parent")}</i>'
                            f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_data.get("name_student")}</i>'
                            f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_data.get("phone")}</i>'
                            f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_data.get("description")}</i>'
                            '\n‚úÖ –§–∞–π–ª: <i>–∑–∞–≥—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç</i>',
                    reply_markup=keyboard_admin.employee_key(employees, id_request)
                )

        else:
            for i in list_files:
                if i['type_file'] == ContentType.PHOTO:
                    await message.answer_photo(
                        photo=i['file']
                    )
                elif i['type_file'] == ContentType.VIDEO:
                    await message.answer_video(
                        video=i['file']
                    )
                elif i['type_file'] == ContentType.VOICE:
                    await message.answer_voice(
                        voice=i['file']
                    )
                else:
                    await message.answer_document(
                        document=i['file']
                    )
            await bot.send_message(
                ID_ADMIN,
                f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} '
                f'–æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É</b>'
                f'\n‚úÖ –ü–æ—á—Ç–∞: <i>{context_data.get("email")}</i>'
                f'\n‚úÖ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <i>{context_data.get("name_parent")}</i>'
                f'\n‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞: <i>{context_data.get("name_student")}</i>'
                f'\n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{context_data.get("phone")}</i>'
                f'\n‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: <i>{context_data.get("description")}</i>'
                '\n‚úÖ –§–∞–π–ª: <i>–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã</i>',
                reply_markup=keyboard_admin.employee_key(employees, id_request)
            )

        await command_start(message, state)
